---
import AdminLayout from "@/layouts/adminLayout.astro";
import { Button } from "@/components/ui/button";
import AdminFilters from "@/components/shared/AdminFilters.astro";
import { getOrders, getOrderItems } from "@/lib/database";
import type { Order, OrderItem } from "@/lib/database";

// Obtener todas las √≥rdenes con logs para debug y manejo de errores
let allOrders: Order[] = [];

try {
  console.log('üîç Obteniendo √≥rdenes desde la base de datos...');
  allOrders = await getOrders(100, 0) as Order[];
  console.log('üìã √ìrdenes obtenidas:', allOrders.length);
  console.log('üìã Datos de √≥rdenes:', allOrders);
} catch (error) {
  console.error('‚ùå Error obteniendo √≥rdenes:', error);
  allOrders = [];
}

// Estad√≠sticas
const totalOrders = allOrders.length;
const pendingOrders = allOrders.filter(order => order.status === 'pending').length;
const processingOrders = allOrders.filter(order => order.status === 'processing').length;
const completedOrders = allOrders.filter(order => order.status === 'delivered').length;

console.log('üìä Estad√≠sticas de √≥rdenes calculadas:', {
  totalOrders,
  pendingOrders,
  processingOrders,
  completedOrders
});

// Funci√≥n para formatear fecha
function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('es-ES', {
    day: 'numeric',
    month: 'short',
    year: 'numeric'
  }).format(date);
}

// Funci√≥n para formatear moneda
function formatCurrency(amount: number): string {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount);
}

// Funci√≥n para obtener el color del badge seg√∫n el estado
function getStatusColor(status: string): string {
  switch (status) {
    case 'pending':
      return 'bg-yellow-100 text-yellow-800';
    case 'processing':
      return 'bg-blue-100 text-blue-800';
    case 'shipped':
      return 'bg-purple-100 text-purple-800';
    case 'delivered':
      return 'bg-green-100 text-green-800';
    case 'cancelled':
      return 'bg-red-100 text-red-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
}

// Funci√≥n para obtener el texto del estado
function getStatusText(status: string): string {
  switch (status) {
    case 'pending':
      return 'Pendiente';
    case 'processing':
      return 'En Proceso';
    case 'shipped':
      return 'Enviado';
    case 'delivered':
      return 'Entregado';
    case 'cancelled':
      return 'Cancelado';
    default:
      return status;
  }
}

// Obtener conteo de productos para todas las √≥rdenes con manejo de errores mejorado
const orderProductCounts = new Map<number, number>();
console.log('üîç Obteniendo items de √≥rdenes...');

for (const order of allOrders) {
  try {
    const items = await getOrderItems(order.id);
    orderProductCounts.set(order.id, items.length);
    console.log(`üì¶ Orden ${order.id}: ${items.length} items`);
  } catch (error) {
    console.error(`‚ùå Error obteniendo productos de la orden ${order.id}:`, error);
    orderProductCounts.set(order.id, 0);
  }
}

console.log('üìä Conteo de productos por orden:', Object.fromEntries(orderProductCounts));
---

<AdminLayout title="Gesti√≥n de √ìrdenes">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mt-10 mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold tracking-tight text-foreground">Gesti√≥n de √ìrdenes</h1>
            <p class="mt-2 text-muted-foreground">
              Administra todas las √≥rdenes y pedidos de tu tienda
            </p>
          </div>
          <a href="/admin/dashboard">
            <Button variant="outline" className="border-border text-foreground hover:bg-muted">
              <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              Volver al Dashboard
            </Button>
          </a>
        </div>
      </div>

      <!-- Estad√≠sticas de √≥rdenes -->
      <div class="mb-8 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
        <div class="rounded-lg border border-border bg-background p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-8 w-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-muted-foreground">Total √ìrdenes</p>
              <p class="text-2xl font-semibold text-foreground">{totalOrders}</p>
            </div>
          </div>
        </div>

        <div class="rounded-lg border border-border bg-background p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-8 w-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-muted-foreground">Pendientes</p>
              <p class="text-2xl font-semibold text-foreground">{pendingOrders}</p>
            </div>
          </div>
        </div>

        <div class="rounded-lg border border-border bg-background p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-muted-foreground">En Proceso</p>
              <p class="text-2xl font-semibold text-foreground">{processingOrders}</p>
            </div>
          </div>
        </div>

        <div class="rounded-lg border border-border bg-background p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-muted-foreground">Completadas</p>
              <p class="text-2xl font-semibold text-foreground">{completedOrders}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Filtros y b√∫squeda -->
      <AdminFilters
        searchPlaceholder="Buscar por n√∫mero de orden o cliente..."
        searchId="search-orders"
        filters={[
          {
            id: "status-filter-orders",
            label: "Todos los estados",
            options: [
              { value: "pending", label: "Pendiente" },
              { value: "processing", label: "En Proceso" },
              { value: "shipped", label: "Enviado" },
              { value: "delivered", label: "Entregado" },
              { value: "cancelled", label: "Cancelado" }
            ]
          },
          {
            id: "date-filter-orders",
            label: "√öltimos 30 d√≠as",
            options: [
              { value: "today", label: "Hoy" },
              { value: "week", label: "Esta semana" },
              { value: "month", label: "Este mes" },
              { value: "year", label: "Este a√±o" }
            ]
          }
        ]}
      />

      <!-- Tabla de √≥rdenes -->
      <div class="rounded-lg border border-border bg-background">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-muted">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Orden</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Cliente</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Fecha</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Total</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Estado</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Acciones</th>
              </tr>
            </thead>
            <tbody id="orders-table-body" class="divide-y divide-border">
              {allOrders.length === 0 ? (
                <tr>
                  <td colspan="7" class="px-6 py-12 text-center">
                    <div class="flex flex-col items-center">
                      <svg class="h-12 w-12 text-muted-foreground mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      <h3 class="text-lg font-medium text-foreground mb-2">No hay √≥rdenes</h3>
                      <p class="text-muted-foreground">No se han encontrado √≥rdenes en el sistema.</p>
                    </div>
                  </td>
                </tr>
              ) : (
                allOrders.map((order) => (
                  <tr class="hover:bg-muted/50">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm font-medium text-foreground">{order.order_number}</div>
                      <div class="text-sm text-muted-foreground">
                        {orderProductCounts.get(order.id) || 0} producto{(orderProductCounts.get(order.id) || 0) !== 1 ? 's' : ''}
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm font-medium text-foreground">{order.customer_name}</div>
                      <div class="text-sm text-muted-foreground">{order.customer_email}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-foreground">
                      {formatDate(order.created_at)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-foreground">
                      {formatCurrency(order.total_amount)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(order.status)}`}>
                        {getStatusText(order.status)}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div class="flex space-x-2">
                        <a href={`/admin/orders/${order.uuid}`}>
                          <Button variant="outline" size="sm" className="border-border text-foreground hover:bg-muted" title="Ver detalles">
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                            </svg>
                          </Button>
                        </a>
                        <button
                          type="button"
                          class="change-status-btn inline-flex items-center justify-center rounded-md text-sm font-semibold ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-primary bg-primary text-primary-foreground hover:bg-primary/90 h-8 px-3 gap-2 shadow-sm"
                          data-order-id={order.id}
                          data-order-number={order.order_number}
                          data-current-status={order.status}
                          title="Cambiar estado"
                        >
                          <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                          </svg>

                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>

        <!-- Paginaci√≥n -->
        {allOrders.length > 0 && (
          <div class="px-6 py-4 border-t border-border">
            <div class="flex items-center justify-between">
              <div class="text-sm text-muted-foreground">
                Mostrando <span class="font-medium text-foreground">{allOrders.length}</span> orden{allOrders.length !== 1 ? 'es' : ''}
              </div>
              <div class="flex items-center space-x-2">
                <Button variant="outline" size="sm" className="border-border text-foreground hover:bg-muted" disabled>
                  Anterior
                </Button>
                <Button variant="outline" size="sm" className="border-border hover:bg-muted bg-primary text-primary-foreground">
                  1
                </Button>
                <Button variant="outline" size="sm" className="border-border text-foreground hover:bg-muted" disabled>
                  Siguiente
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>
  </div>

  <!-- Di√°logo para cambiar estado -->
  <dialog id="status-dialog" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); margin: 0;" class="backdrop:bg-black/80 bg-background border border-border rounded-lg p-6 max-w-md shadow-xl">
    <div class="space-y-4">
      <h2 class="text-lg font-semibold text-foreground">Cambiar Estado de Orden</h2>
      <p id="dialog-order-info" class="text-sm text-muted-foreground"></p>
      
      <form id="status-form" method="POST" class="space-y-4">
        <input type="hidden" name="action" value="change_status" />
        <input type="hidden" name="orderId" id="dialog-order-id" />
        
        <div>
          <label class="block text-sm font-medium text-foreground mb-2">Nuevo Estado</label>
          <select
            name="newStatus"
            id="dialog-new-status"
            class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground focus:outline-none focus:ring-2 focus:ring-primary"
            required
          >
            <option value="pending">Pendiente</option>
            <option value="processing">En Proceso</option>
            <option value="shipped">Enviado</option>
            <option value="delivered">Entregado</option>
            <option value="cancelled">Cancelado</option>
          </select>
        </div>

        <div class="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 gap-2">
          <button
            type="button"
            id="dialog-cancel"
            class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2"
          >
            Cancelar
          </button>
          <button
            type="submit"
            class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
          >
            Cambiar Estado
          </button>
        </div>
      </form>
    </div>
  </dialog>
</AdminLayout>

<script>
  // Filtros de √≥rdenes
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-orders');
    const statusFilter = document.getElementById('status-filter-orders');
    const dateFilter = document.getElementById('date-filter-orders');
    const tableBody = document.getElementById('orders-table-body');
    
    // Funci√≥n para filtrar √≥rdenes
    function filterOrders() {
      const searchTerm = (searchInput as HTMLInputElement)?.value.toLowerCase() || '';
      const selectedStatus = (statusFilter as HTMLSelectElement)?.value || '';
      const selectedDate = (dateFilter as HTMLSelectElement)?.value || '';
      
      console.log('üîç Filtros de √≥rdenes aplicados:', { searchTerm, selectedStatus, selectedDate });
      
      if (!tableBody) return;
      
      const rows = tableBody.querySelectorAll('tr');
      let visibleCount = 0;
      
      rows.forEach((row) => {
        // Obtener datos de la fila
        const orderNumberElement = row.querySelector('td:nth-child(2) .text-sm.font-medium');
        const customerNameElement = row.querySelector('td:nth-child(3) .text-sm.font-medium');
        const customerEmailElement = row.querySelector('td:nth-child(3) .text-sm.text-muted-foreground');
        const dateElement = row.querySelector('td:nth-child(4) .text-sm');
        const statusBadge = row.querySelector('td:nth-child(6) span');
        
        const orderNumber = orderNumberElement?.textContent?.toLowerCase() || '';
        const customerName = customerNameElement?.textContent?.toLowerCase() || '';
        const customerEmail = customerEmailElement?.textContent?.toLowerCase() || '';
        const orderDate = dateElement?.textContent || '';
        const statusText = statusBadge?.textContent?.toLowerCase() || '';
        
        // Mapear texto de estado a valor
        let orderStatus = '';
        if (statusText.includes('pendiente')) orderStatus = 'pending';
        else if (statusText.includes('proceso')) orderStatus = 'processing';
        else if (statusText.includes('enviado')) orderStatus = 'shipped';
        else if (statusText.includes('entregado')) orderStatus = 'delivered';
        else if (statusText.includes('cancelado')) orderStatus = 'cancelled';
        
        // Aplicar filtros
        const matchesSearch = searchTerm === '' || 
          orderNumber.includes(searchTerm) || 
          customerName.includes(searchTerm) ||
          customerEmail.includes(searchTerm);
        
        const matchesStatus = !selectedStatus || orderStatus === selectedStatus;
        
        // Filtro de fecha (simplificado)
        const matchesDate = !selectedDate || true; // Por ahora siempre true, se puede implementar l√≥gica de fechas m√°s compleja
        
        if (matchesSearch && matchesStatus && matchesDate) {
          row.style.display = '';
          visibleCount++;
        } else {
          row.style.display = 'none';
        }
      });
      
      console.log(`‚úÖ ${visibleCount} √≥rdenes mostradas despu√©s del filtrado`);
    }
    
    // Event listeners para filtros
    searchInput?.addEventListener('input', filterOrders);
    statusFilter?.addEventListener('change', filterOrders);
    dateFilter?.addEventListener('change', filterOrders);
    
    console.log('üéØ Filtros de √≥rdenes inicializados');
  });
</script>

<script>
  // Manejar cambio de estado
  document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Inicializando gestor de cambio de estado...');
    const dialog = document.getElementById('status-dialog') as HTMLDialogElement;
    const dialogOrderInfo = document.getElementById('dialog-order-info');
    const dialogOrderId = document.getElementById('dialog-order-id') as HTMLInputElement;
    const dialogNewStatus = document.getElementById('dialog-new-status') as HTMLSelectElement;
    const dialogCancel = document.getElementById('dialog-cancel');
    const statusForm = document.getElementById('status-form') as HTMLFormElement;

    // Abrir di√°logo al hacer clic en bot√≥n de cambiar estado
    document.querySelectorAll('.change-status-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('üîò Bot√≥n clickeado');
        
        const orderId = button.getAttribute('data-order-id');
        const orderNumber = button.getAttribute('data-order-number');
        const currentStatus = button.getAttribute('data-current-status');

        console.log('üìã Datos:', { orderId, orderNumber, currentStatus });

        if (orderId && orderNumber && currentStatus && dialogOrderInfo && dialogOrderId && dialogNewStatus) {
          dialogOrderInfo.textContent = `Orden: ${orderNumber}`;
          dialogOrderId.value = orderId;
          dialogNewStatus.value = currentStatus;
          console.log('‚úÖ Abriendo di√°logo');
          dialog?.showModal();
        } else {
          console.error('‚ùå Faltan datos o elementos del di√°logo');
        }
      });
    });

    console.log(`‚úÖ ${document.querySelectorAll('.change-status-btn').length} botones de cambio de estado encontrados`);

    // Cerrar di√°logo
    dialogCancel?.addEventListener('click', () => {
      dialog?.close();
    });

    // Cerrar al hacer clic fuera del di√°logo
    dialog?.addEventListener('click', (e) => {
      const rect = dialog.getBoundingClientRect();
      if (
        e.clientX < rect.left ||
        e.clientX > rect.right ||
        e.clientY < rect.top ||
        e.clientY > rect.bottom
      ) {
        dialog.close();
      }
    });

    // Manejar env√≠o del formulario
    statusForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(statusForm);
      const orderId = formData.get('orderId');
      const newStatus = formData.get('newStatus');

      if (!orderId || !newStatus) return;

      try {
        const response = await fetch('/api/orders/update-status', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            orderId: parseInt(orderId as string),
            status: newStatus
          })
        });

        if (response.ok) {
          dialog?.close();
          window.location.reload();
        } else {
          alert('Error al actualizar el estado de la orden');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al actualizar el estado de la orden');
      }
    });
  });
</script>
