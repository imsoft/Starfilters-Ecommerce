---
import AdminLayout from "@/layouts/adminLayout.astro";
import { Button } from "@/components/ui/button";
import { ProductImageUploader } from "@/components/ui/ProductImageUploader";
import { getProductByUuid, updateProduct } from "@/lib/database";
import { requireAdmin } from "@/lib/auth-utils";
import type { Product } from "@/lib/database";

// Verificar que el usuario es administrador
const { redirect, user, isAdmin } = await requireAdmin(Astro.cookies);
if (redirect) {
  return Astro.redirect(redirect);
}

const { id } = Astro.params;

// Obtener el producto por UUID
let product: Product | null = null;
let errorMessage = '';

if (id) {
  product = await getProductByUuid(id);
  if (!product) {
    return Astro.redirect('/admin/products?error=product_not_found');
  }
} else {
  return Astro.redirect('/admin/products?error=invalid_id');
}

// Manejar envío del formulario
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const action = formData.get('action')?.toString() || 'update';
    
    const productData = {
      name: formData.get('name')?.toString() || '',
      description: formData.get('description')?.toString() || '',
      price: parseFloat(formData.get('price')?.toString() || '0'),
      category: formData.get('category')?.toString() || '',
      stock: parseInt(formData.get('stock')?.toString() || '0'),
      image_url: formData.get('image_url')?.toString() || product.image_url,
      status: action === 'draft' ? 'draft' : (formData.get('status')?.toString() as 'active' | 'inactive' | 'draft' || product.status)
    };

    // Validar datos requeridos
    if (action === 'update' && (!productData.name || !productData.description || productData.price <= 0)) {
      throw new Error('Todos los campos requeridos deben ser completados correctamente');
    }
    
    if (action === 'draft' && !productData.name) {
      throw new Error('El nombre del producto es requerido');
    }

    // Actualizar el producto
    const success = await updateProduct(product.id, productData);
    
    if (success) {
      const redirectMessage = action === 'draft' ? 'draft_saved' : 'updated';
      return Astro.redirect(`/admin/products?success=${redirectMessage}`);
    } else {
      errorMessage = 'Error al actualizar el producto';
    }
  } catch (error) {
    console.error('Error actualizando producto:', error);
    errorMessage = error instanceof Error ? error.message : 'Error al actualizar el producto';
  }
}
---

<AdminLayout title="Editar Producto">
  <div class="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mt-10 mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold tracking-tight text-foreground">Editar Producto</h1>
            <p class="mt-2 text-muted-foreground">
              Modifica la información de: {product.name}
            </p>
          </div>
          <a href="/admin/products">
            <Button variant="outline" className="border-border text-foreground hover:bg-muted">
              <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              Volver
            </Button>
          </a>
        </div>
      </div>

      <!-- Mensajes de error -->
      {errorMessage && (
        <div class="mb-6 rounded-md bg-red-50 border border-red-200 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800">Error</h3>
              <div class="mt-2 text-sm text-red-700">
                <p>{errorMessage}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      <!-- Formulario -->
      <form method="POST" class="space-y-8">
        <!-- Información básica -->
        <div class="rounded-lg border border-border bg-background p-6">
          <h2 class="text-lg font-semibold text-foreground mb-4">Información Básica</h2>
          
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label for="name" class="block text-sm font-medium text-foreground mb-2">
                Nombre del producto
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={product.name}
                required
                class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="Ej: Filtro HEPA Premium"
              />
            </div>

            <div>
              <label for="sku" class="block text-sm font-medium text-foreground mb-2">
                SKU
              </label>
              <input
                type="text"
                id="sku"
                name="sku"
                value={product.uuid}
                readonly
                class="w-full rounded-md border border-border bg-muted px-3 py-2 text-muted-foreground"
                placeholder="UUID del producto"
              />
            </div>

            <div>
              <label for="price" class="block text-sm font-medium text-foreground mb-2">
                Precio
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span class="text-muted-foreground sm:text-sm">$</span>
                </div>
                <input
                  type="number"
                  id="price"
                  name="price"
                  value={product.price}
                  step="0.01"
                  min="0"
                  required
                  class="w-full rounded-md border border-border bg-background pl-7 pr-3 py-2 text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  placeholder="0.00"
                />
              </div>
            </div>

            <div>
              <label for="stock" class="block text-sm font-medium text-foreground mb-2">
                Stock
              </label>
              <input
                type="number"
                id="stock"
                name="stock"
                value={product.stock}
                min="0"
                required
                class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                placeholder="0"
              />
            </div>
          </div>

          <div class="mt-6">
            <label for="description" class="block text-sm font-medium text-foreground mb-2">
              Descripción
            </label>
            <textarea
              id="description"
              name="description"
              rows="4"
              required
              class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              placeholder="Describe las características y beneficios del producto..."
            >{product.description}</textarea>
          </div>
        </div>

        <!-- Categoría y etiquetas -->
        <div class="rounded-lg border border-border bg-background p-6">
          <h2 class="text-lg font-semibold text-foreground mb-4">Categorización</h2>
          
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <div>
              <label for="category" class="block text-sm font-medium text-foreground mb-2">
                Categoría
              </label>
              <select
                id="category"
                name="category"
                required
                class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              >
                <option value="">Seleccionar categoría</option>
                <option value="filtros" selected={product.category === 'filtros'}>Filtros</option>
                <option value="cuartos-limpios" selected={product.category === 'cuartos-limpios'}>Cuartos Limpios</option>
                <option value="accesorios" selected={product.category === 'accesorios'}>Accesorios</option>
                <option value="servicios" selected={product.category === 'servicios'}>Servicios</option>
              </select>
            </div>

            <div>
              <label for="status" class="block text-sm font-medium text-foreground mb-2">
                Estado
              </label>
              <select
                id="status"
                name="status"
                required
                class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              >
                <option value="active" selected={product.status === 'active'}>Activo</option>
                <option value="inactive" selected={product.status === 'inactive'}>Inactivo</option>
                <option value="draft" selected={product.status === 'draft'}>Borrador</option>
              </select>
            </div>
          </div>

          <div class="mt-6">
            <label for="tags" class="block text-sm font-medium text-foreground mb-2">
              Etiquetas
            </label>
            <div class="tags-input-container">
              <div id="tags-display" class="flex flex-wrap gap-2 min-h-[42px] p-3 border border-border rounded-md bg-background focus-within:ring-2 focus-within:ring-primary focus-within:ring-offset-2">
                <input
                  type="text"
                  id="tags-input-field"
                  class="flex-1 min-w-[120px] bg-transparent border-none outline-none text-foreground placeholder:text-muted-foreground"
                  placeholder="Escribe etiquetas y presiona Enter o coma... (ej: premium, hepa, industrial)"
                />
              </div>
              <input type="hidden" id="tags-hidden" name="tags" value={product.tags || ""} />
              <p class="mt-1 text-sm text-muted-foreground">
                Presiona Enter o escribe una coma para agregar etiquetas
              </p>
            </div>
          </div>
        </div>

        <!-- Imágenes -->
        <div class="rounded-lg border border-border bg-background p-6">
          <h2 class="text-lg font-semibold text-foreground mb-4">Imágenes del Producto</h2>
          
          <ProductImageUploader 
            client:load
            productId={product.uuid}
            initialImages={product.image_url ? [{
              id: 'main',
              url: product.image_url,
              isPrimary: true
            }] : []}
          />
        </div>

        <!-- Especificaciones técnicas -->
        <div class="rounded-lg border border-border bg-background p-6">
          <h2 class="text-lg font-semibold text-foreground mb-4">Especificaciones Técnicas</h2>
          
          <div class="space-y-4">
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div>
                <label for="dimensions" class="block text-sm font-medium text-foreground mb-2">
                  Dimensiones (L x W x H)
                </label>
                <input
                  type="text"
                  id="dimensions"
                  name="dimensions"
                  value="30 x 20 x 15 cm"
                  class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  placeholder="Ej: 30 x 20 x 15 cm"
                />
              </div>

              <div>
                <label for="weight" class="block text-sm font-medium text-foreground mb-2">
                  Peso
                </label>
                <input
                  type="text"
                  id="weight"
                  name="weight"
                  value="2.5 kg"
                  class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  placeholder="Ej: 2.5 kg"
                />
              </div>

              <div>
                <label for="material" class="block text-sm font-medium text-foreground mb-2">
                  Material
                </label>
                <input
                  type="text"
                  id="material"
                  name="material"
                  value="Polipropileno, Acero inoxidable"
                  class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  placeholder="Ej: Polipropileno, Acero inoxidable"
                />
              </div>

              <div>
                <label for="warranty" class="block text-sm font-medium text-foreground mb-2">
                  Garantía
                </label>
                <input
                  type="text"
                  id="warranty"
                  name="warranty"
                  value="2 años"
                  class="w-full rounded-md border border-border bg-background px-3 py-2 text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  placeholder="Ej: 2 años"
                />
              </div>
            </div>
          </div>
        </div>

        <!-- Historial de cambios -->
        <div class="rounded-lg border border-border bg-background p-6">
          <h2 class="text-lg font-semibold text-foreground mb-4">Historial de Cambios</h2>
          
          <div class="space-y-3">
            <div class="flex items-center space-x-3 p-3 rounded-md bg-muted/50">
              <div class="flex-shrink-0">
                <div class="h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center">
                  <svg class="h-4 w-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                </div>
              </div>
              <div class="flex-1 min-w-0">
                <p class="text-sm font-medium text-foreground">Producto actualizado</p>
                <p class="text-sm text-muted-foreground">Precio cambiado de $85.00 a $89.00</p>
              </div>
              <div class="flex-shrink-0 text-sm text-muted-foreground">
                Hace 2 horas
              </div>
            </div>

            <div class="flex items-center space-x-3 p-3 rounded-md bg-muted/50">
              <div class="flex-shrink-0">
                <div class="h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center">
                  <svg class="h-4 w-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                </div>
              </div>
              <div class="flex-1 min-w-0">
                <p class="text-sm font-medium text-foreground">Producto creado</p>
                <p class="text-sm text-muted-foreground">Producto agregado al catálogo</p>
              </div>
              <div class="flex-shrink-0 text-sm text-muted-foreground">
                Hace 1 semana
              </div>
            </div>
          </div>
        </div>

        <!-- Botones de acción -->
        <div class="flex justify-end space-x-4">
          <a href="/admin/products">
            <Button type="button" variant="outline" className="border-border text-foreground hover:bg-muted">
              Cancelar
            </Button>
          </a>
          <Button type="submit" name="action" value="draft" variant="outline" className="border-border text-foreground hover:bg-muted">
            Guardar como borrador
          </Button>
          <Button type="submit" name="action" value="update" className="bg-primary text-primary-foreground hover:bg-primary/90">
            Actualizar producto
          </Button>
        </div>
      </form>
  </div>
</AdminLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tagsDisplay = document.getElementById('tags-display');
    const tagsInputField = document.getElementById('tags-input-field');
    const tagsHidden = document.getElementById('tags-hidden');
    
    if (!tagsDisplay || !tagsInputField || !tagsHidden) return;
    
    // Obtener etiquetas existentes del input hidden
    let tags: string[] = (tagsHidden as HTMLInputElement).value ? 
      (tagsHidden as HTMLInputElement).value.split(',').filter((tag: string) => tag.trim()) : [];
    
    // Función para crear un badge de etiqueta
    function createTagBadge(tag: string): HTMLElement {
      const badge = document.createElement('span');
      badge.className = 'inline-flex items-center gap-1 px-2 py-1 text-xs font-medium bg-primary text-primary-foreground rounded-md';
      badge.innerHTML = `
        ${tag}
        <button type="button" class="ml-1 hover:bg-primary-foreground/20 rounded-full p-0.5 transition-colors remove-tag">
          <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      `;
      
      // Agregar event listener para eliminar etiqueta
      const removeBtn = badge.querySelector('.remove-tag');
      removeBtn?.addEventListener('click', () => {
        removeTag(tag);
      });
      
      return badge;
    }
    
    // Función para actualizar la visualización
    function updateDisplay() {
      if (!tagsDisplay || !tagsInputField || !tagsHidden) return;
      
      // Limpiar display
      const existingBadges = tagsDisplay.querySelectorAll('.inline-flex');
      existingBadges.forEach(badge => badge.remove());
      
      // Agregar badges de etiquetas
      tags.forEach(tag => {
        const badge = createTagBadge(tag);
        tagsDisplay.insertBefore(badge, tagsInputField);
      });
      
      // Actualizar input hidden
      (tagsHidden as HTMLInputElement).value = tags.join(',');
    }
    
    // Función para agregar etiqueta
    function addTag(tag: string) {
      const trimmedTag = tag.trim().toLowerCase();
      if (trimmedTag && !tags.includes(trimmedTag)) {
        tags.push(trimmedTag);
        updateDisplay();
        (tagsInputField as HTMLInputElement).value = '';
      }
    }
    
    // Función para eliminar etiqueta
    function removeTag(tagToRemove: string) {
      tags = tags.filter(tag => tag !== tagToRemove);
      updateDisplay();
    }
    
    // Cargar etiquetas existentes al inicio
    updateDisplay();
    
    // Event listeners
    tagsInputField.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ',') {
        e.preventDefault();
        const value = (e.target as HTMLInputElement).value;
        if (value.trim()) {
          addTag(value);
        }
      }
    });
    
    tagsInputField.addEventListener('blur', () => {
      const value = (tagsInputField as HTMLInputElement).value;
      if (value.trim()) {
        addTag(value);
      }
    });
  });
</script>
