---
import WebsiteLayout from "@/layouts/websiteLayout.astro";
import { getAuthenticatedUser } from "@/lib/auth-utils";
import { getUserOrderWithItems } from "@/lib/database";

// Verificar autenticación
const user = getAuthenticatedUser(Astro.cookies);
if (!user) {
  return Astro.redirect('/login?redirect=' + encodeURIComponent(Astro.url.pathname));
}

// Obtener ID del pedido de la URL
const { id } = Astro.params;
const orderId = parseInt(id as string);

if (!orderId || isNaN(orderId)) {
  return Astro.redirect('/orders');
}

// Obtener pedido con items
const orderWithItems = await getUserOrderWithItems(user.id, orderId);

if (!orderWithItems) {
  return Astro.redirect('/orders');
}

const { items, ...order } = orderWithItems;

// Funciones de utilidad
const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(new Date(date));
};

const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: 'MXN'
  }).format(amount);
};

const getStatusColor = (status: string) => {
  switch (status) {
    case 'pending':
      return 'bg-yellow-100 text-yellow-800';
    case 'processing':
      return 'bg-blue-100 text-blue-800';
    case 'shipped':
      return 'bg-purple-100 text-purple-800';
    case 'delivered':
      return 'bg-green-100 text-green-800';
    case 'cancelled':
      return 'bg-red-100 text-red-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

const getStatusText = (status: string) => {
  switch (status) {
    case 'pending':
      return 'Pendiente';
    case 'processing':
      return 'Procesando';
    case 'shipped':
      return 'Enviado';
    case 'delivered':
      return 'Entregado';
    case 'cancelled':
      return 'Cancelado';
    default:
      return status;
  }
};

// Calcular subtotal
const subtotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
const shipping = 0; // Por ahora sin costo de envío
const tax = subtotal * 0.16; // IVA 16%
const total = subtotal + shipping + tax;
---

<WebsiteLayout title={`Pedido #${order.order_number}`}>
  <div class="min-h-screen bg-background">
    <div class="mx-auto max-w-4xl px-6 lg:px-8">
      <!-- Breadcrumb -->
      <nav class="mb-8" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 text-sm text-muted-foreground">
          <li>
            <a href="/" class="hover:text-foreground transition-colors">Inicio</a>
          </li>
          <li>
            <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
          </li>
          <li>
            <a href="/orders" class="hover:text-foreground transition-colors">Mis Pedidos</a>
          </li>
          <li>
            <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
          </li>
          <li class="text-foreground font-medium">Pedido #{order.order_number}</li>
        </ol>
      </nav>

      <!-- Header -->
      <div class="mb-12">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div>
            <h1 class="text-3xl font-bold text-foreground">
              Pedido #{order.order_number}
            </h1>
            <p class="mt-2 text-muted-foreground">
              Realizado el {formatDate(order.created_at)}
            </p>
          </div>
          <span class={`inline-flex items-center rounded-full px-4 py-2 text-sm font-medium ${getStatusColor(order.status)}`}>
            {getStatusText(order.status)}
          </span>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-12">
        <!-- Contenido principal -->
        <div class="lg:col-span-2 space-y-8">
          <!-- Items del pedido -->
          <div class="bg-card rounded-lg border border-border p-8">
            <h2 class="text-lg font-semibold text-foreground mb-6">
              Productos Pedidos
            </h2>
            <div class="space-y-6">
              {items.map((item) => (
                <div class="flex items-center gap-4 p-4 rounded-lg bg-muted/30">
                  <div class="flex-shrink-0">
                    {item.image_url ? (
                      <img
                        src={item.image_url}
                        alt={item.product_name}
                        class="w-16 h-16 object-cover rounded-md"
                      />
                    ) : (
                      <div class="w-16 h-16 bg-muted rounded-md flex items-center justify-center">
                        <svg
                          class="w-8 h-8 text-muted-foreground"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
                          ></path>
                        </svg>
                      </div>
                    )}
                  </div>
                  <div class="flex-grow">
                    <h3 class="font-medium text-foreground">
                      {item.product_name}
                    </h3>
                    <p class="text-sm text-muted-foreground">
                      Cantidad: {item.quantity}
                    </p>
                  </div>
                  <div class="text-right">
                    <p class="font-medium text-foreground">
                      {formatCurrency(item.price)}
                    </p>
                    <p class="text-sm text-muted-foreground">
                      c/u
                    </p>
                  </div>
                  <div class="text-right">
                    <p class="font-semibold text-foreground">
                      {formatCurrency(item.price * item.quantity)}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <!-- Información del pedido -->
          <div class="bg-card rounded-lg border border-border p-8">
            <h2 class="text-lg font-semibold text-foreground mb-6">
              Información del Pedido
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="text-sm font-medium text-foreground mb-3">
                  Datos del Cliente
                </h3>
                <div class="space-y-2 text-sm">
                  <div>
                    <span class="text-muted-foreground">Nombre:</span>
                    <span class="ml-2 text-foreground">{order.customer_name}</span>
                  </div>
                  <div>
                    <span class="text-muted-foreground">Email:</span>
                    <span class="ml-2 text-foreground">{order.customer_email}</span>
                  </div>
                  {order.customer_phone && (
                    <div>
                      <span class="text-muted-foreground">Teléfono:</span>
                      <span class="ml-2 text-foreground">{order.customer_phone}</span>
                    </div>
                  )}
                </div>
              </div>

              {order.shipping_address && (
                <div>
                  <h3 class="text-sm font-medium text-foreground mb-3">
                    Dirección de Envío
                  </h3>
                  <p class="text-sm text-foreground whitespace-pre-line">
                    {order.shipping_address}
                  </p>
                </div>
              )}
            </div>
          </div>

          <!-- Estado del pedido -->
          <div class="bg-card rounded-lg border border-border p-8">
            <h2 class="text-lg font-semibold text-foreground mb-6">
              Estado del Pedido
            </h2>
            <div class="space-y-4">
              <div class="flex items-center gap-4">
                <div class={`w-3 h-3 rounded-full ${order.status !== 'cancelled' ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                <div>
                  <p class="font-medium text-foreground">Pedido Confirmado</p>
                  <p class="text-sm text-muted-foreground">
                    {formatDate(order.created_at)}
                  </p>
                </div>
              </div>
              <div class="flex items-center gap-4">
                <div class={`w-3 h-3 rounded-full ${['processing', 'shipped', 'delivered'].includes(order.status) ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                <div>
                  <p class="font-medium text-foreground">En Proceso</p>
                  {order.status === 'processing' && (
                    <p class="text-sm text-muted-foreground">Tu pedido está siendo preparado</p>
                  )}
                </div>
              </div>
              <div class="flex items-center gap-4">
                <div class={`w-3 h-3 rounded-full ${['shipped', 'delivered'].includes(order.status) ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                <div>
                  <p class="font-medium text-foreground">Enviado</p>
                  {order.status === 'shipped' && (
                    <p class="text-sm text-muted-foreground">Tu pedido está en camino</p>
                  )}
                </div>
              </div>
              <div class="flex items-center gap-4">
                <div class={`w-3 h-3 rounded-full ${order.status === 'delivered' ? 'bg-green-500' : 'bg-gray-300'}`}></div>
                <div>
                  <p class="font-medium text-foreground">Entregado</p>
                  {order.status === 'delivered' && (
                    <p class="text-sm text-muted-foreground">Pedido entregado exitosamente</p>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Sidebar -->
        <div class="space-y-8">
          <!-- Resumen del pedido -->
          <div class="bg-card rounded-lg border border-border p-8">
            <h2 class="text-lg font-semibold text-foreground mb-6">
              Resumen del Pedido
            </h2>
            <div class="space-y-3">
              <div class="flex justify-between text-sm">
                <span class="text-muted-foreground">Subtotal:</span>
                <span class="text-foreground">{formatCurrency(subtotal)}</span>
              </div>
              <div class="flex justify-between text-sm">
                <span class="text-muted-foreground">Envío:</span>
                <span class="text-foreground">{shipping === 0 ? 'Gratis' : formatCurrency(shipping)}</span>
              </div>
              <div class="flex justify-between text-sm">
                <span class="text-muted-foreground">IVA (16%):</span>
                <span class="text-foreground">{formatCurrency(tax)}</span>
              </div>
              <div class="border-t border-border pt-3">
                <div class="flex justify-between">
                  <span class="font-semibold text-foreground">Total:</span>
                  <span class="font-bold text-lg text-foreground">
                    {formatCurrency(order.total_amount)}
                  </span>
                </div>
              </div>
            </div>
          </div>

          <!-- Acciones -->
          <div class="bg-card rounded-lg border border-border p-8">
            <h2 class="text-lg font-semibold text-foreground mb-4">
              Acciones
            </h2>
            <div class="space-y-3">
              {order.status === 'delivered' && (
                <a
                  href={`/orders/${order.id}/invoice`}
                  class="block w-full text-center rounded-md bg-primary px-4 py-2 text-sm font-semibold text-primary-foreground hover:bg-primary/90 transition-colors"
                >
                  Descargar Factura
                </a>
              )}
              {(order.status === 'pending' || order.status === 'processing') && (
                <button
                  type="button"
                  class="block w-full text-center rounded-md bg-red-600 px-4 py-2 text-sm font-semibold text-white hover:bg-red-700 transition-colors"
                  onclick={`cancelOrder(${order.id})`}
                >
                  Cancelar Pedido
                </button>
              )}
              <a
                href="/orders"
                class="block w-full text-center rounded-md bg-secondary px-4 py-2 text-sm font-semibold text-secondary-foreground hover:bg-secondary/90 transition-colors"
              >
                Ver Todos los Pedidos
              </a>
              <a
                href="/filtros"
                class="block w-full text-center rounded-md bg-secondary px-4 py-2 text-sm font-semibold text-secondary-foreground hover:bg-secondary/90 transition-colors"
              >
                Continuar Comprando
              </a>
            </div>
          </div>

          <!-- Ayuda -->
          <div class="bg-card rounded-lg border border-border p-8">
            <h2 class="text-lg font-semibold text-foreground mb-4">
              ¿Necesitas Ayuda?
            </h2>
            <div class="space-y-3 text-sm">
              <p class="text-muted-foreground">
                Si tienes preguntas sobre tu pedido, no dudes en contactarnos.
              </p>
              <a
                href="/contact"
                class="inline-flex items-center text-primary hover:text-primary/90 font-medium"
              >
                Contactar Soporte →
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Diálogo de confirmación -->
  <dialog id="confirm-dialog" class="backdrop:bg-black/80 bg-background border border-border rounded-lg p-6 max-w-md">
    <div class="space-y-4">
      <h2 id="dialog-title" class="text-lg font-semibold text-foreground"></h2>
      <p id="dialog-description" class="text-sm text-muted-foreground"></p>
      <div class="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 gap-2">
        <button id="dialog-cancel" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
          No cancelar
        </button>
        <button id="dialog-confirm" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 bg-destructive text-destructive-foreground hover:bg-destructive/90 h-10 px-4 py-2">
          Cancelar pedido
        </button>
      </div>
    </div>
  </dialog>
</WebsiteLayout>

<script>
  // Diálogo de confirmación nativo
  let confirmCallback: (() => void) | null = null;
  
  function showConfirmDialog(title: string, description: string, onConfirm: () => void): void {
    const dialog = document.getElementById('confirm-dialog') as HTMLDialogElement;
    const dialogTitle = document.getElementById('dialog-title');
    const dialogDescription = document.getElementById('dialog-description');
    const confirmBtn = document.getElementById('dialog-confirm');
    const cancelBtn = document.getElementById('dialog-cancel');
    
    if (!dialog || !dialogTitle || !dialogDescription) return;
    
    dialogTitle.textContent = title;
    dialogDescription.textContent = description;
    confirmCallback = onConfirm;
    
    dialog.showModal();
    
    const handleConfirm = () => {
      if (confirmCallback) {
        confirmCallback();
        confirmCallback = null;
      }
      dialog.close();
    };
    
    const handleCancel = () => {
      confirmCallback = null;
      dialog.close();
    };
    
    const newConfirmBtn = confirmBtn?.cloneNode(true) as HTMLButtonElement;
    const newCancelBtn = cancelBtn?.cloneNode(true) as HTMLButtonElement;
    
    confirmBtn?.parentNode?.replaceChild(newConfirmBtn, confirmBtn);
    cancelBtn?.parentNode?.replaceChild(newCancelBtn, cancelBtn);
    
    newConfirmBtn?.addEventListener('click', handleConfirm);
    newCancelBtn?.addEventListener('click', handleCancel);
    
    dialog.addEventListener('click', (e) => {
      const rect = dialog.getBoundingClientRect();
      if (
        e.clientX < rect.left ||
        e.clientX > rect.right ||
        e.clientY < rect.top ||
        e.clientY > rect.bottom
      ) {
        handleCancel();
      }
    }, { once: true });
  }

  // Función para cancelar pedido
  function cancelOrder(orderId: number) {
    showConfirmDialog(
      'Cancelar pedido',
      '¿Estás seguro de que quieres cancelar este pedido?',
      () => {
        // Implementar lógica de cancelación
        console.log(`Cancelando pedido ${orderId}`);
        // TODO: Implementar llamada al backend para cancelar
      }
    );
  }

  // Hacer la función global
  (window as any).cancelOrder = cancelOrder;
</script>
