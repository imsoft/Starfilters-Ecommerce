---
import WebsiteLayout from "@/layouts/websiteLayout.astro";
import SEO from "@/components/shared/SEO.astro";
import { getBlogPostByUuid } from "@/lib/database";
import type { BlogPost } from "@/lib/database";
import { generateBlogKeywords, generateArticleSchema, generateBreadcrumbSchema } from "@/lib/seo-utils";

// Get blog post UUID from URL
const { uuid } = Astro.params;

// Verify UUID is valid
if (!uuid || typeof uuid !== 'string') {
  return Astro.redirect('/en/blog');
}

// Get blog post from database by UUID
const post = await getBlogPostByUuid(uuid);

// If post doesn't exist, redirect
if (!post) {
  return Astro.redirect('/en/blog');
}

// Use English fields if available, otherwise fall back to Spanish
const postData = {
  ...post,
  title: post.title_en || post.title,
  slug: post.slug_en || post.slug,
  content: post.content_en || post.content,
  excerpt: post.excerpt_en || post.excerpt,
  meta_title: post.meta_title_en || post.meta_title,
  meta_description: post.meta_description_en || post.meta_description,
};

// Function to format date
const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(new Date(date));
};

// Function to get tags as array
const getTagsArray = (tags: string): string[] => {
  if (!tags) return [];
  return tags.split(',').map(tag => tag.trim()).filter(Boolean);
};

const tags = getTagsArray(post.tags);

// Generate SEO data
const siteUrl = Astro.site?.href || Astro.url.origin;
const blogKeywords = generateBlogKeywords(postData);
const articleSchema = generateArticleSchema(postData, siteUrl);
const breadcrumbSchema = generateBreadcrumbSchema([
  { name: 'Home', url: `${siteUrl}/en` },
  { name: 'Blog', url: `${siteUrl}/en/blog` },
  { name: postData.title, url: `${siteUrl}/en/blog/${postData.uuid}` }
]);
---

<WebsiteLayout
  title={postData.title}
  seoTitle={postData.meta_title || postData.title}
  description={postData.meta_description || postData.excerpt}
  keywords={blogKeywords}
  ogImage={post.featured_image}
>
  <SEO
    slot="seo"
    title={postData.meta_title || postData.title}
    description={postData.meta_description || postData.excerpt}
    ogType="article"
    ogImage={post.featured_image}
    ogImageAlt={postData.title}
    keywords={blogKeywords}
    article={{
      publishedTime: post.publish_date ? new Date(post.publish_date).toISOString() : new Date(post.created_at).toISOString(),
      modifiedTime: post.updated_at ? new Date(post.updated_at).toISOString() : new Date(post.created_at).toISOString(),
      author: post.author,
      tags: tags
    }}
  />

  <!-- Article Schema -->
  <script slot="seo" type="application/ld+json" set:html={JSON.stringify(articleSchema)} />

  <!-- Breadcrumb Schema -->
  <script slot="seo" type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
  <div class="bg-background">
    <!-- Breadcrumb -->
    <div class="mx-auto max-w-4xl px-6 lg:px-8">
      <nav class="mb-8" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 text-sm text-muted-foreground">
          <li>
            <a href="/en" class="hover:text-foreground transition-colors">Home</a>
          </li>
          <li>
            <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
          </li>
          <li>
            <a href="/en/blog" class="hover:text-foreground transition-colors">Blog</a>
          </li>
          <li>
            <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
            </svg>
          </li>
          <li class="text-foreground font-medium">{postData.title}</li>
        </ol>
      </nav>
    </div>

    <article class="mx-auto max-w-4xl px-6 lg:px-8">
      <header class="mx-auto max-w-2xl">
        <h1 class="mt-4 text-3xl font-bold tracking-tight text-foreground sm:text-4xl">
          {postData.title}
        </h1>

        <div class="mt-6 flex items-center gap-x-4 text-sm">
          <time datetime={post.created_at.toISOString()} class="text-muted-foreground">
            {formatDate(post.created_at)}
          </time>
          {tags.map(tag => (
            <a
              href="#"
              class="relative z-10 rounded-full bg-muted px-3 py-1.5 font-medium text-muted-foreground hover:bg-muted/80"
            >
              {tag}
            </a>
          ))}
        </div>

        <div class="mt-6 flex items-center gap-x-4">
          <img
            src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
            alt={post.author}
            class="size-10 rounded-full bg-muted"
          />
          <div class="text-sm">
            <p class="font-semibold text-foreground">
              {post.author}
            </p>
            <p class="text-muted-foreground">Author</p>
          </div>
        </div>
      </header>

      <!-- Featured image -->
      {post.featured_image && (
        <div class="mt-8">
          <img
            src={post.featured_image}
            alt={postData.title}
            class="aspect-video w-full rounded-2xl bg-muted object-cover"
          />
        </div>
      )}

      <!-- Article content -->
      <div class="mt-8 prose prose-lg max-w-none">
        <div class="text-lg leading-8 text-foreground" set:html={postData.content}></div>
      </div>

      <!-- Meta information -->
      <div class="mt-12 border-t border-border pt-8">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-x-4">
            <img
              src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
              alt={post.author}
              class="size-12 rounded-full bg-muted"
            />
            <div>
              <p class="font-semibold text-foreground">{post.author}</p>
              <p class="text-muted-foreground">Article Author</p>
            </div>
          </div>

          <div class="flex items-center gap-x-2">
            <span class="text-sm text-muted-foreground">Published on</span>
            <time datetime={post.created_at.toISOString()} class="text-sm font-medium text-foreground">
              {formatDate(post.created_at)}
            </time>
          </div>
        </div>
      </div>

      <!-- Navigation -->
      <div class="mt-12 flex items-center justify-between border-t border-border pt-8">
        <a
          href="/en/blog"
          class="inline-flex items-center text-sm font-medium text-muted-foreground hover:text-foreground transition-colors"
        >
          <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
          Back to blog
        </a>

        <a
          href="/en/filters"
          class="inline-flex items-center text-sm font-medium text-primary hover:text-primary/90 transition-colors"
        >
          View products
          <svg class="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      </div>
    </article>
  </div>
</WebsiteLayout>

<style>
  /* Article content styles */
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4 {
    color: #111827;
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .prose h1 {
    font-size: 2.25rem;
  }

  .prose h2 {
    font-size: 1.875rem;
  }

  .prose h3 {
    font-size: 1.5rem;
  }

  .prose p {
    margin-bottom: 1.5rem;
    line-height: 1.75;
  }

  .prose ul,
  .prose ol {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .prose li {
    margin-bottom: 0.5rem;
  }

  .prose blockquote {
    border-left: 4px solid #e5e7eb;
    padding-left: 1rem;
    font-style: italic;
    color: #6b7280;
    margin: 2rem 0;
  }

  .prose img {
    border-radius: 0.5rem;
    margin: 2rem 0;
  }

  .prose a {
    color: #2563eb;
    text-decoration: underline;
  }

  .prose a:hover {
    color: #1d4ed8;
  }

  .prose code {
    background-color: #f3f4f6;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
  }

  .prose pre {
    background-color: #1f2937;
    color: #f9fafb;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .prose pre code {
    background-color: transparent;
    padding: 0;
    color: inherit;
  }
</style>
